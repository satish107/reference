Referance: https://sqlbolt.com/


SELECT column, another_column, …
FROM mytable;

SELECT * 
FROM mytable;
________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
WHERE condition
    AND/OR another_condition
    AND/OR …;

Operator: =, !=, < <=, >, >=, BETWEEN … AND, NOT BETWEEN … AND, IN (…), NOT IN (…). Ex: col_name NOT IN (1, 3, 5)

________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
WHERE condition
    AND/OR another_condition
    AND/OR …;

constraints: LIKE, NOT LIKE, %, _, IN (…), NOT IN (...). 
Ex: col_name LIKE "ABC" 
Ex: col_name LIKE "%AT%"
	(matches "AT", "ATTIC", "CAT" or even "BATS")
Ex: col_name LIKE "AN_"
	(matches "AND", but not "AN") # Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)
Ex: col_name IN ("A", "B", "C")
________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

________________________________________________________________________________________________________________

SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

________________________________________________________________________________________________________________

SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;

________________________________________________________________________________________________________________

SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

SELECT col_expression AS expr_description, …
FROM mytable;

SELECT column AS better_column_name, …
FROM a_long_widgets_table_name AS mywidgets
INNER JOIN widget_sales
  ON mywidgets.id = widget_sales.widget_id;

________________________________________________________________________________________________________________

SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

COUNT(*), COUNT(column), MIN(column), MAX(column), AVG(column), SUM(column)

SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression
GROUP BY column;

________________________________________________________________________________________________________________

SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
FROM mytable
WHERE condition
GROUP BY column
HAVING group_condition;

If you aren't using the `GROUP BY` clause, a simple `WHERE` clause will suffice.

________________________________________________________________________________________________________________

SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

Order Of Execution: 1. FROM and JOINs, 2. WHERE, 3. GROUP BY, 4. HAVING, 5. SELECT, 6. DISTINCT, 7. ORDER BY, 
8. LIMIT / OFFSET, 

Not every query needs to have all the parts we listed above, but a part of why SQL is so flexible is that it allows developers and data analysts to quickly manipulate data without having to write additional code, all just by using the above clauses.

________________________________________________________________________________________________________________

INSERT INTO mytable
VALUES (value_or_expr, another_value_or_expr, …),
       (value_or_expr_2, another_value_or_expr_2, …),
       …;

INSERT INTO mytable
(column, another_column, …)
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;

INSERT INTO boxoffice
(movie_id, rating, sales_in_millions)
VALUES (1, 9.9, 283742034 / 1000000);

________________________________________________________________________________________________________________

UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;
________________________________________________________________________________________________________________

DELETE FROM mytable
WHERE condition;

________________________________________________________________________________________________________________

CREATE TABLE IF NOT EXISTS mytable (
    column DataType TableConstraint DEFAULT default_value,
    another_column DataType TableConstraint DEFAULT default_value,
    …
);

CREATE TABLE movies (
    id INTEGER PRIMARY KEY,
    title TEXT,
    director TEXT,
    year INTEGER, 
    length_minutes INTEGER
);

________________________________________________________________________________________________________________

ALTER TABLE mytable
ADD column DataType OptionalTableConstraint 
    DEFAULT default_value;

ALTER TABLE mytable
DROP column_to_be_deleted;

ALTER TABLE mytable
RENAME TO new_table_name;

________________________________________________________________________________________________________________

DROP TABLE IF EXISTS mytable;

________________________________________________________________________________________________________________



________________________________________________________________________________________________________________


________________________________________________________________________________________________________________


________________________________________________________________________________________________________________


________________________________________________________________________________________________________________


________________________________________________________________________________________________________________


________________________________________________________________________________________________________________


________________________________________________________________________________________________________________



________________________________________________________________________________________________________________



________________________________________________________________________________________________________________



________________________________________________________________________________________________________________
